// list of includes taken from CMS source
#include <boost/algorithm/string/case_conv.hpp>
#include <boost/algorithm/string/classification.hpp>
#include <boost/algorithm/string/erase.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/algorithm/string.hpp>
#include "boost/algorithm/string.hpp"
#include <boost/algorithm/string/join.hpp>
#include <boost/algorithm/string/predicate.hpp>
#include <boost/algorithm/string_regex.hpp>
#include <boost/algorithm/string/replace.hpp>
#include <boost/algorithm/string/split.hpp>
#include "boost/algorithm/string/trim_all.hpp"
#include <boost/algorithm/string/trim.hpp>
#include <boost/any.hpp>
#include <boost/archive/archive_exception.hpp>
#include <boost/archive/basic_archive.hpp>
#include <boost/archive/basic_binary_iarchive.hpp>
#include <boost/archive/basic_binary_iprimitive.hpp>
#include <boost/archive/basic_binary_oarchive.hpp>
#include <boost/archive/basic_binary_oprimitive.hpp>
// doesn't work with vanilla boost:
// #include <boost/archive/detail/polymorphic_iarchive_dispatch.hpp>
// #include <boost/archive/detail/polymorphic_iarchive_impl.hpp>
#include <boost/archive/detail/polymorphic_iarchive_route.hpp>
//#include <boost/archive/detail/polymorphic_oarchive_dispatch.hpp>
//#include <boost/archive/detail/polymorphic_oarchive_impl.hpp>
#include <boost/archive/detail/polymorphic_oarchive_route.hpp>
//#include <boost/archive/impl/archive_pointer_iserializer.ipp>
//#include <boost/archive/impl/archive_pointer_oserializer.ipp>
#include <boost/archive/impl/archive_serializer_map.ipp>
#include <boost/archive/impl/basic_binary_iarchive.ipp>
#include <boost/archive/impl/basic_binary_iprimitive.ipp>
#include <boost/archive/impl/basic_binary_oarchive.ipp>
#include <boost/archive/impl/basic_binary_oprimitive.ipp>
//not in vanilla boost
//#include <boost/archive/shared_ptr_helper.hpp>
#include <boost/archive/text_iarchive.hpp>
#include <boost/archive/text_oarchive.hpp>
#include "boost/archive/xml_iarchive.hpp"
#include "boost/archive/xml_oarchive.hpp"
#include "boost/array.hpp"
#include "boost/array.hpp"
#include <boost/asio.hpp>
#include <boost/assign.hpp>
#include <boost/assign/list_of.hpp>
#include <boost/assign/std/vector.hpp>
  // #include <boost/bimap.hpp>
#include <boost/bind/bind.hpp>
//#include "boost/bind.hpp"
#include<boost/bind.hpp>
#include <boost/bind.hpp>
#include "boost/bind.hpp"
#include "boost/bind.hpp"
//    #include <boost/boost::shared_ptr.hpp>
#include "boost/call_traits.hpp"
#include <boost/chrono/chrono.hpp>
#include <boost/chrono.hpp>
#include "boost/concept_check.hpp"
#include <boost/config/warning_disable.hpp>
#include "boost/container/flat_set.hpp"
#include <boost/core/demangle.hpp>
// #include <boost/cstdint.hpp>
//#include<boost/cstdint.hpp>
//#include <boost/cstdint.hpp>
#include<boost/cstdint.hpp>
#include <boost/cstdint.hpp>
#include <boost/cstdint.hpp>
#include "boost/cstdint.hpp"
#include "boost/cstdint.hpp"
#include <boost/cstdint.hpp> //for uint16_t
#include <boost/cstdint.hpp> // For uint64_t and other types. Also found in DataFormats/L1Trigger/src/classes.h
#include <boost/cstdint.hpp> //INCLUDECHECKER:SKIP
#include "boost/date_time.hpp"
#include <boost/date_time/posix_time/posix_time.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
#include <boost/dynamic_bitset.hpp>
#include "boost/dynamic_bitset.hpp"
#include <boost/exception/all.hpp>
#include <boost/exception/diagnostic_information.hpp>
#include "boost/filesystem/convenience.hpp"
#include <boost/filesystem/fstream.hpp>
//#include <boost/filesystem.hpp>
#include <boost/filesystem.hpp>
#include "boost/filesystem.hpp"
#include <boost/filesystem/operations.hpp>
#include "boost/filesystem/operations.hpp"
#include <boost/filesystem/path.hpp>
#include "boost/filesystem/path.hpp"
#include <boost/foreach.hpp>
#include <boost/foreach.hpp>
#include "boost/foreach.hpp"
#include <boost/format.hpp>
#include "boost/format.hpp"
#include <boost/functional/hash.hpp>
#include "boost/functional.hpp"
#include<boost/function.hpp>
#include <boost/function.hpp>
#include <boost/function_output_iterator.hpp>
// #include <boost/function_types/result_type.hpp>
#include <boost/graph/adjacency_list.hpp>
#include "boost/graph/adjacency_list.hpp"
/* #include "boost/graph/adjacency_matrix.hpp" */
#include "boost/graph/adjacency_matrix.hpp"
#include <boost/graph/depth_first_search.hpp>
#include "boost/graph/depth_first_search.hpp"
#include "boost/graph/graph_traits.hpp"
#include "boost/graph/graph_utility.hpp"
#include <boost/graph/graphviz.hpp>
#include <boost/graph/lookup_edge.hpp>
#include <boost/graph/subgraph.hpp>
#include "boost/graph/visitors.hpp"
//#include <boost/integer/endian.hpp>
//#include "boost/intrusive_ptr.hpp"
#include <boost/intrusive_ptr.hpp>
#include "boost/intrusive_ptr.hpp"
#include "boost/intrusive_ptr.hpp"
#include <boost/iostreams/device/mapped_file.hpp>
#include <boost/iterator_adaptors.hpp>
#include <boost/iterator/counting_iterator.hpp>
#include <boost/iterator/filter_iterator.hpp>
#include "boost/iterator/filter_iterator.hpp"
#include <boost/iterator/indirect_iterator.hpp>
#include "boost/iterator/indirect_iterator.hpp"
#include <boost/iterator/iterator_facade.hpp>
#include <boost/iterator/permutation_iterator.hpp>
#include <boost/iterator/transform_iterator.hpp>
#include "boost/iterator/transform_iterator.hpp"
#include "boost/lambda/bind.hpp"
#include <boost/lambda/lambda.hpp>
#include "boost/lambda/lambda.hpp"
// #include "boost/lexical_cast.hpp"
#include <boost/lexical_cast.hpp>
#include <boost/lexical_cast.hpp>
#include "boost/lexical_cast.hpp"
#include <boost/math/common_factor.hpp>
//#include <boost/math/fpclassify.hpp>
#include "boost/math/special_functions/sign.hpp"
#include <boost/mem_fn.hpp>
#include "boost/mem_fn.hpp"
#include <boost/mpl/and.hpp>
// #include <boost/mpl/assert.hpp>
#include <boost/mpl/assert.hpp>
#include "boost/mpl/begin_end.hpp"
#include <boost/mpl/bool.hpp>
#include "boost/mpl/copy_if.hpp"
#include "boost/mpl/deref.hpp"
#include "boost/mpl/empty.hpp"
#include "boost/mpl/eval_if.hpp"
#include "boost/mpl/find.hpp"
#include <boost/mpl/for_each.hpp>
#include "boost/mpl/has_xxx.hpp"
#include <boost/mpl/if.hpp>
#include "boost/mpl/if.hpp"
#include <boost/mpl/int.hpp>
#include <boost/mpl/list.hpp>
#include <boost/mpl/logical.hpp>
#include "boost/mpl/next.hpp"
#include <boost/mpl/not.hpp>
#include <boost/mpl/or.hpp>
#include "boost/mpl/pop_back.hpp"
#include "boost/mpl/prior.hpp"
//#include "boost/mpl/vector.hpp"
#include <boost/mpl/vector.hpp>
#include "boost/mpl/vector.hpp"
#include "boost/mpl/vector.hpp"
#include "boost/mpl/vector/vector30.hpp"
//#include "boost/multi_array.hpp"
#include <boost/multi_array.hpp>
#include "boost/multi_array.hpp"
#include <boost/multi_index/composite_key.hpp>
#include <boost/multi_index_container.hpp>
#include <boost/multi_index/member.hpp>
#include <boost/multi_index/mem_fun.hpp>
#include <boost/multi_index/ordered_index.hpp>
#include <boost/operators.hpp>
#include "boost/operators.hpp"
#include <boost/phoenix/bind/bind_member_function.hpp>
#include <boost/pointee.hpp>
#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/comparison/equal.hpp>
#include <boost/preprocessor/seq/for_each_i.hpp>
#include <boost/preprocessor/stringize.hpp>
#include <boost/preprocessor/tuple/elem.hpp>
#include <boost/program_options/config.hpp>
#include <boost/program_options/detail/convert.hpp>
//#include <boost/program_options.hpp>
#include <boost/program_options.hpp>
#include <boost/program_options.hpp>
#include "boost/program_options.hpp"
#include <boost/property_tree/json_parser.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/xml_parser.hpp>
#include <boost/ptr_container/ptr_deque.hpp>
#include "boost/ptr_container/ptr_deque.hpp"
#include <boost/ptr_container/ptr_list.hpp>
#include "boost/ptr_container/ptr_list.hpp"
//#include "boost/ptr_container/ptr_map.hpp"
#include <boost/ptr_container/ptr_map.hpp>
#include "boost/ptr_container/ptr_map.hpp"
#include <boost/ptr_container/ptr_vector.hpp>
#include "boost/ptr_container/ptr_vector.hpp"
#include <boost/python/class.hpp>
#include <boost/python/def.hpp>
#include <boost/python/extract.hpp>
#include <boost/python.hpp>
#include <boost/python/init.hpp>
#include <boost/python/list.hpp>
#include <boost/python/module.hpp>
#include <boost/python/suite/indexing/vector_indexing_suite.hpp>
#include <boost/random/linear_congruential.hpp>
#include <boost/random/uniform_int.hpp>
#include <boost/random/uniform_real.hpp>
#include <boost/random/variate_generator.hpp>
#include "boost/range/adaptor/reversed.hpp"
#include <boost/range.hpp>
#include "boost/range.hpp"
#include <boost/range/irange.hpp>
#include <boost/range/iterator_range.hpp>
#include "boost/range/iterator_range.hpp"
#include <boost/ref.hpp>
//#include <boost/regex.hpp>
#include <boost/regex.hpp>
#include <boost/regex.hpp>
#include "boost/regex.hpp"
#include "boost/scoped_array.hpp"
#include <boost/scoped_ptr.hpp>
#include "boost/scoped_ptr.hpp"
#include <boost/serialization/access.hpp>
#include "boost/serialization/access.hpp"
#include "boost/serialization/array.hpp"
#include "boost/serialization/assume_abstract.hpp"
#include <boost/serialization/base_object.hpp>
#include "boost/serialization/base_object.hpp"
#include <boost/serialization/bitset.hpp>
#include <boost/serialization/export.hpp>
#include "boost/serialization/export.hpp"
#include <boost/serialization/list.hpp>
#include <boost/serialization/map.hpp>
#include "boost/serialization/map.hpp"
#include <boost/serialization/nvp.hpp>
#include <boost/serialization/set.hpp>
#include <boost/serialization/shared_ptr.hpp>
#include "boost/serialization/shared_ptr.hpp"
#include <boost/serialization/split_free.hpp>
#include "boost/serialization/split_member.hpp"
#include <boost/serialization/string.hpp>
#include <boost/serialization/unordered_map.hpp>
#include "boost/serialization/utility.hpp"
#include <boost/serialization/vector.hpp>
#include "boost/serialization/vector.hpp"
#include "boost/serialization/version.hpp"
#include "boost/shared_array.hpp"
//#include <boost/shared_ptr.hpp>
#include <boost/shared_ptr.hpp>
#include "boost/shared_ptr.hpp"
#include "boost/shared_ptr.hpp"
#include "boost/smart_ptr/shared_ptr.hpp"
#include "boost/spirit/home/classic/core/non_terminal/grammar.hpp"
//#include <boost/spirit/home/support/detail/endian/endian.hpp>
//#include <boost/spirit/home/support/detail/integer/endian.hpp>
#include <boost/spirit/home/support/detail/math/fpclassify.hpp>
#include "boost/spirit/include/classic_chset.hpp"
#include <boost/spirit/include/classic_core.hpp>
#include "boost/spirit/include/classic_core.hpp"
#include "boost/spirit/include/classic_exceptions.hpp"
#include "boost/spirit/include/classic_grammar_def.hpp"
#include <boost/spirit/include/classic.hpp>
#include "boost/spirit/include/classic.hpp"
#include <boost/spirit/include/classic_push_back_actor.hpp>
#include <boost/spirit/include/phoenix.hpp>
#include <boost/spirit/include/qi_grammar.hpp>
#include <boost/spirit/include/qi.hpp>
#include <boost/spirit/include/qi_rule.hpp>
#include <boost/statechart/custom_reaction.hpp>
#include "boost/statechart/event.hpp"
#include <boost/statechart/state.hpp>
#include "boost/statechart/state_machine.hpp"
#include <boost/statechart/transition.hpp>
//#include <boost/static_assert.hpp>
#include <boost/static_assert.hpp>
#include "boost/static_assert.hpp"
//#include <boost/test/auto_unit_test.hpp>
#include <boost/test/auto_unit_test.hpp>
#include <boost/test/test_tools.hpp>
#include <boost/test/unit_test.hpp>
#include "boost/thread/condition.hpp"
#include <boost/thread.hpp>
#include <boost/thread/mutex.hpp>
#include "boost/thread/pthread/once_atomic.hpp"
//#include "boost/thread/thread.hpp"
#include <boost/thread/thread.hpp>
#include "boost/thread/thread.hpp"
#include "boost/thread/tss.hpp"
#include "boost/thread/xtime.hpp"
#include <boost/timer.hpp>
//FIXME: Redefines timer?
// #include <boost/timer/timer.hpp>
#include<boost/tokenizer.hpp>
#include<boost/tokenizer.hpp>
#include <boost/tokenizer.hpp>
#include "boost/tokenizer.hpp"
#include <boost/tr1/unordered_map.hpp>
#include <boost/tuple/tuple.hpp>
#include "boost/tuple/tuple.hpp"
#include <boost/type_traits.hpp>
#include "boost/type_traits.hpp"
#include <boost/type_traits/is_arithmetic.hpp>
#include "boost/type_traits/is_base_and_derived.hpp"
#include <boost/type_traits/is_base_of.hpp>
#include "boost/type_traits/is_base_of.hpp"
#include <boost/type_traits/is_convertible.hpp>
#include <boost/type_traits/is_floating_point.hpp>
#include <boost/type_traits/is_floating_point.hpp>
#include <boost/type_traits/is_integral.hpp>
#include <boost/type_traits/is_integral.hpp>
// #include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/type_traits/is_signed.hpp>
#include <boost/type_traits/is_unsigned.hpp>
#include "boost/type_traits/remove_const.hpp"
#include <boost/units/detail/utility.hpp>
#include <boost/unordered_map.hpp>
#include "boost/unordered_map.hpp"
#include <boost/unordered_set.hpp>
#include <boost/utility/enable_if.hpp>
#include <boost/utility/enable_if.hpp>
#include "boost/utility/enable_if.hpp"
#include <boost/utility.hpp>
#include "boost/utility.hpp"
#include <boost/uuid/uuid_generators.hpp>
#include <boost/uuid/uuid.hpp>
#include <boost/uuid/uuid_io.hpp>
#include <boost/variant.hpp>
#include <boost/version.hpp>
#include <boost/version.hpp>
#include "boost/version.hpp"
#include <boost/weak_ptr.hpp>

int main() {}
